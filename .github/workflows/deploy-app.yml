name: Deploy Application to EKS

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'manifests/**'
      - '.github/workflows/deploy-app.yml'

jobs:
  deploy:
    name: Deploy NestJS App
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      EKS_CLUSTER_NAME: fiap-soat-eks-dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
          kubectl version --client
          kubectl cluster-info

      - name: Deploy Kubernetes Manifests
        run: |
          echo "üì¶ Aplicando manifests de infraestrutura..."
          echo "‚ÑπÔ∏è  Deployment √© gerenciado pelo reposit√≥rio da aplica√ß√£o"
          cd manifests
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          
          # Criar secret dinamicamente via GitHub Secrets
          echo "üîê Criando secret..."
          DB_PASS="${{ secrets.DB_PASSWORD }}"
          JWT_SEC="${{ secrets.JWT_SECRET }}"
          
          # Usar valores padr√£o se secrets n√£o estiverem configurados (apenas dev)
          DB_PASS="${DB_PASS:-SuperSecret123!}"
          JWT_SEC="${JWT_SEC:-default-jwt-secret-change-me-in-production}"
          
          kubectl create secret generic fiap-soat-application-secrets \
            --namespace=fiap-soat-app \
            --from-literal=DATABASE_PASSWORD="$DB_PASS" \
            --from-literal=JWT_SECRET="$JWT_SEC" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl apply -f service.yaml
          kubectl apply -f hpa.yaml
          echo ""
          echo "‚úÖ Manifests de infraestrutura aplicados com sucesso!"

      - name: Verify Infrastructure
        run: |
          echo ""
          echo "=== ÔøΩ Status do Service ==="
          kubectl get svc -n fiap-soat-app fiap-soat-application-service
          echo ""
          echo "=== ÔøΩ ConfigMap ==="
          kubectl get configmap -n fiap-soat-app fiap-soat-application-config
          echo ""
          echo "=== ÔøΩ Secret ==="
          kubectl get secret -n fiap-soat-app fiap-soat-application-secrets
          echo ""
          echo "=== üåê Service Endpoints ==="
          kubectl get endpoints -n fiap-soat-app fiap-soat-application-service || echo "‚ö†Ô∏è  Endpoints n√£o dispon√≠veis (deployment ainda n√£o criado)"
          echo ""
          echo "‚ÑπÔ∏è  O deployment da aplica√ß√£o ser√° gerenciado pelo reposit√≥rio fiap-soat-application"
