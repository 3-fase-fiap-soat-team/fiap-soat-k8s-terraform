apiVersion: apps/v1
kind: Deployment
metadata:
  name: fiap-soat-local-ready
  namespace: fiap-soat-app
  labels:
    app: fiap-soat-local-ready
    version: v1
    tier: backend
    source: local-image-ready
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: fiap-soat-local-ready
  template:
    metadata:
      labels:
        app: fiap-soat-local-ready
        version: v1
        tier: backend
        source: local-image-ready
    spec:
      containers:
      - name: fiap-soat-ready
        image: node:20-alpine
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "üöÄ FIAP SOAT - NestJS Application Ready for ECR Deploy!"
            echo "üìã Image Status:"
            echo "   ‚úÖ Local Docker Image: fiap-soat-nestjs-app:latest (2.24GB)"
            echo "   ‚úÖ ECR Tag Created: 280273007505.dkr.ecr.us-east-1.amazonaws.com/fiap-soat-nestjs-app:latest"
            echo "   ‚úÖ Deploy Script: /scripts/deploy-from-ecr.sh (executable)"
            echo ""
            echo "üéØ Next Steps:"
            echo "   1. Create ECR repository via console"
            echo "   2. Push image: docker push 280273007505.dkr.ecr.us-east-1.amazonaws.com/fiap-soat-nestjs-app:latest"
            echo "   3. Run deploy: ./scripts/deploy-from-ecr.sh"
            echo ""
            echo "üìä NestJS Application Features:"
            echo "   - Clean Architecture implementation"
            echo "   - Complete API with 7 database migrations"
            echo "   - Health checks and monitoring"
            echo "   - Swagger documentation"
            echo "   - All FIAP SOAT endpoints ready"
            echo ""
            echo "üåê Starting demo server on port 3000..."
            
            # Create a simple server showing the status
            cat > server.js << 'EOF'
            const http = require('http');
            
            const server = http.createServer((req, res) => {
              res.writeHead(200, {'Content-Type': 'application/json'});
              
              if (req.url === '/health') {
                res.end(JSON.stringify({
                  status: 'ok',
                  message: 'FIAP SOAT NestJS Application Ready for ECR Deploy',
                  timestamp: new Date().toISOString(),
                  docker_image: 'fiap-soat-nestjs-app:latest (2.24GB)',
                  ecr_tag: '280273007505.dkr.ecr.us-east-1.amazonaws.com/fiap-soat-nestjs-app:latest',
                  deploy_script: '/scripts/deploy-from-ecr.sh',
                  next_steps: [
                    'Create ECR repository via AWS console',
                    'Push image to ECR',
                    'Run deploy script'
                  ]
                }));
              } else if (req.url === '/api' || req.url === '/') {
                res.end(JSON.stringify({
                  application: 'FIAP SOAT NestJS - Ready for ECR',
                  status: 'Image Built and Tagged',
                  image_size: '2.24GB',
                  features: [
                    'Clean Architecture',
                    '7 Database Migrations',
                    'Complete API Endpoints',
                    'Health Checks',
                    'Swagger Documentation',
                    'Production Ready'
                  ],
                  endpoints: {
                    health: '/health',
                    customers: '/customers',
                    products: '/products', 
                    orders: '/orders',
                    categories: '/categories',
                    webhook: '/webhook/mercadopago'
                  },
                  docker_commands: {
                    local_image: 'fiap-soat-nestjs-app:latest',
                    ecr_tag: '280273007505.dkr.ecr.us-east-1.amazonaws.com/fiap-soat-nestjs-app:latest',
                    push_command: 'docker push 280273007505.dkr.ecr.us-east-1.amazonaws.com/fiap-soat-nestjs-app:latest'
                  }
                }));
              } else {
                res.writeHead(404);
                res.end(JSON.stringify({error: 'Not found', available_endpoints: ['/health', '/api', '/']}));
              }
            });
            
            server.listen(3000, () => {
              console.log('üéâ FIAP SOAT Ready Server running on port 3000');
              console.log('üìç Available endpoints:');
              console.log('   GET / - Application info');
              console.log('   GET /health - Health check');
              console.log('   GET /api - API documentation');
              console.log('');
              console.log('üöÄ Real NestJS application ready for ECR deployment!');
            });
            EOF
            
            node server.js
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "demo-ready"
        - name: PORT
          value: "3000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: fiap-soat-ready-service
  namespace: fiap-soat-app
  labels:
    app: fiap-soat-local-ready
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: fiap-soat-local-ready
