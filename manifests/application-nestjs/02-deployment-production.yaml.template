# FIAP SOAT - NestJS Application Deployment (PRODUCTION VERSION)
# Este arquivo é um template para quando a imagem Docker da aplicação estiver pronta
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fiap-soat-nestjs
  namespace: fiap-soat-app
  labels:
    app: fiap-soat-nestjs
    version: v1
    component: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fiap-soat-nestjs
  template:
    metadata:
      labels:
        app: fiap-soat-nestjs
        version: v1
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fiap-soat-nestjs
      containers:
      - name: fiap-soat-nestjs
        # PRODUCTION: imagem da aplicação NestJS real
        image: fiap-soat/nestjs-app:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        # Environment variables da aplicação
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: fiap-soat-nestjs-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: fiap-soat-nestjs-config
              key: PORT
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: fiap-soat-nestjs-config
              key: AWS_REGION
        - name: JWT_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: fiap-soat-nestjs-config
              key: JWT_EXPIRES_IN
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: DB_PORT
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: DB_PASSWORD
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: DB_DATABASE
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: JWT_SECRET
        - name: COGNITO_USER_POOL_ID
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: COGNITO_USER_POOL_ID
        - name: COGNITO_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: fiap-soat-nestjs-secrets
              key: COGNITO_CLIENT_ID
        # Health checks para NestJS
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Resources para aplicação NestJS real
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        # Security context para aplicação
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      # Tolerations para AWS Academy
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "general"
        effect: "NoSchedule"
      # Anti-affinity para distribuir pods
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fiap-soat-nestjs
              topologyKey: kubernetes.io/hostname
