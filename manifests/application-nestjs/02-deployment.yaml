# FIAP SOAT - NestJS Application Deployment
# Este deployment está configurado para AWS EKS com instâncias t3.small
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fiap-soat-nestjs
  namespace: fiap-soat-app
  labels:
    app: fiap-soat-nestjs
    version: v1
    component: backend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fiap-soat-nestjs
  template:
    metadata:
      labels:
        app: fiap-soat-nestjs
        version: v1
        component: backend
      annotations:
        # Preparado para monitoring futuro
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: fiap-soat-nestjs
        # TEMPORÁRIO: usando nginx para validar infraestrutura
        # TODO: Trocar por fiap-soat/nestjs-app:latest quando disponível
        image: nginx:alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        # Health checks configurados para nginx (path /)
        # TODO: Atualizar para /health quando for NestJS real
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Resources otimizados para t3.small (2vCPU, 2GB RAM)
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
            ephemeral-storage: "100Mi"
          limits:
            memory: "128Mi"
            cpu: "200m"
            ephemeral-storage: "500Mi"
        # Security context básico
        securityContext:
          runAsNonRoot: true
          runAsUser: 101 # nginx user
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      # Tolerations para nodes AWS Academy
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "general"
        effect: "NoSchedule"
      # Anti-affinity para distribuir pods em nodes diferentes (quando possível)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fiap-soat-nestjs
              topologyKey: kubernetes.io/hostname
